syntax = "proto3";

package service;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-preprocess/options/preprocess.proto";
import "github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource.proto";
import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "github.com/infobloxopen/protoc-gen-atlas-validate/options/atlas_validate.proto";


option go_package = "my-application/pkg/pb;pb";

// The MyApplication service, GetVersion RPC, and Version message
// make up a simple "starter" example. It allows the Atlas CLI to generate an
// end-to-end example for the sake of demonstration. Feel free to change 
// GetVersion to better-suit how your versioning system, or get rid of it entirely.

// Here are some helpful resources to aid you in your protobuf quest:
// https://github.com/infobloxopen/atlas-contacts-app/blob/master/proto/contacts.proto
// https://developers.google.com/protocol-buffers/docs/proto
// https://github.com/grpc-ecosystem/grpc-gateway
// https://developers.google.com/protocol-buffers/docs/style

// Happy protobuffing!

// TODO: Write a protobuf schema for the MyApplication service. The 
// messages and RPCs will compose the API for the service.

// TODO: Structure your own protobuf messages. Each protocol buffer message is a 
// small logical record of information, containing a series of name-value pairs.
message VersionResponse {
  string version = 1;
}

message User {
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true}];
  string name = 2 [(preprocess.field).string = {methods:[trim]}];

  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
}

message CreateUserRequest {
  User payload = 1;
}

message CreateUserResponse {
  User result = 1;
}

message ReadUserRequest {
  atlas.rpc.Identifier id = 1;
}

message ReadUserResponse {
  User result = 1;
}

message DeleteUserRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteUserResponse { }

message ListUserRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListUserResponse {
  repeated User results = 1;
  infoblox.api.PageInfo page = 2;
}

message PatchUserRequest {
  User payload = 1;
}

message PatchUserResponse {
  User result = 1;
}


// TODO: Define the MyApplication service and its methods. Feel free
// to change the name of MyApplication to better-suit your naming
// conventions.
service MyApplication {
  option (gorm.server) = {
    autogen: true,
    txn_middleware: true
  };

  rpc GetVersion(google.protobuf.Empty) returns (VersionResponse) {
    // TODO: Provide mappings between REST endpoints and service methods.
    option (google.api.http) = {
      get: "/version"
    };
  }

  rpc Create(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/user"
      body: "payload"
    };
  }

  rpc Read(ReadUserRequest) returns (ReadUserResponse) {
    option (google.api.http) = {
      get: "/user/{id.resource_id}"
    };
  }

  rpc Delete(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/user/{id.resource_id}"
    };
    option (gorm.method).object_type = "User";
  }

  rpc List(ListUserRequest) returns (ListUserResponse) {
    option (google.api.http) = {
      get: "/user"
    };
  }

  rpc Update(PatchUserRequest) returns (PatchUserResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
      patch: "/user/{payload.id.resource_id}"
      body: "payload"
      additional_bindings: {
        put: "/user/{payload.id.resource_id}"
        body: "payload"
      }
    };
  }
}
